// <auto-generated />
using System;
using Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251001170645_allownull")]
    partial class allownull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Application.AutoContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DescriptionOthers")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FileRow")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("IsDesable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSendToAvaya")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUploadedSuccessfully")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ScheduledCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ScheduledCallId");

                    b.ToTable("AutoContact", "Application");
                });

            modelBuilder.Entity("Domain.Entities.Application.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("ContactCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("FullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("IsDesable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ContactCategoryId");

                    b.ToTable("Contact", "Application");
                });

            modelBuilder.Entity("Domain.Entities.Application.HistoricalCall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("AssignFromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignToUserAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AssignToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CallDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("CallDuration")
                        .HasColumnType("float");

                    b.Property<Guid?>("CallStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CallTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<DateTime?>("GetResultFromAvayaAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLatestCall")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LatestHistoricalCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScheduledByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledCallDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ScheduledCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledToUserAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ScheduledToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("SubCallStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignFromUserId");

                    b.HasIndex("AssignToUserId");

                    b.HasIndex("CallStatusId");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId");

                    b.HasIndex("LatestHistoricalCallId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ScheduledByUserId");

                    b.HasIndex("ScheduledToUserId");

                    b.ToTable("HistoricalCall", "Application");
                });

            modelBuilder.Entity("Domain.Entities.Application.HistoricalCallPathResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HistoricalCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueString")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EntityFieldId");

                    b.HasIndex("HistoricalCallId");

                    b.ToTable("HistoricalCallPathResult", "Application");
                });

            modelBuilder.Entity("Domain.Entities.Application.PersonalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullNameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullNameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("PersonalInfo", "Application");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "System@System",
                            FullNameAr = "النظام",
                            StateCode = (byte)1
                        },
                        new
                        {
                            Id = new Guid("d741da85-bd74-42cc-8d22-8176f49580e6"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "POMApplicationUser@System",
                            FullNameAr = "نظام الاتصال التنبؤي",
                            StateCode = (byte)1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Application.ScheduledCall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("AssignFromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignToUserAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AssignToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CallStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CallTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LatestHistoricalCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScheduledByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledCallDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledToUserAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ScheduledToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AssignFromUserId");

                    b.HasIndex("AssignToUserId");

                    b.HasIndex("CallStatusId");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId");

                    b.HasIndex("LatestHistoricalCallId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ScheduledByUserId");

                    b.HasIndex("ScheduledToUserId");

                    b.ToTable("ScheduledCall", "Application");
                });

            modelBuilder.Entity("Domain.Entities.Application.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameForSystem")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Setting", "Application");
                });

            modelBuilder.Entity("Domain.Entities.Application.SystemProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CallTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<int>("Currant")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Type")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SystemProgress", "Application");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("FunctionIdentifire")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DynamicFunction", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicFunctionParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("DynamicFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FunctionIdentifire")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFunctionId");

                    b.ToTable("DynamicFunctionParameter", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicFunctionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("DynamicFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OutputIdentifire")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFunctionId");

                    b.ToTable("DynamicFunctionResult", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("DynamicReport", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicReportField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("DynamicReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityMapId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DynamicReportId");

                    b.HasIndex("EntityMapId");

                    b.ToTable("DynamicReportField", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CallStatusFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OtherNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RelatedEntityPK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("SubCallStatusFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Entity", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("DynamicFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityActionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityActionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ProcessOrder")
                        .HasColumnType("int");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFunctionId");

                    b.HasIndex("EntityActionGroupId");

                    b.HasIndex("EntityActionTypeId");

                    b.ToTable("EntityAction", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionDynamicFunctionParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("DynamicFunctionParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FieldShouldRelatedToEntityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFunctionParameterId");

                    b.HasIndex("EntityActionId");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityActionDynamicFunctionParameter", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionDynamicFunctionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("DynamicFunctionResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsResultToNotification")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFunctionResultId");

                    b.HasIndex("EntityActionId");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityActionDynamicFunctionResult", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityActionTypeRequiredFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EntityActionId");

                    b.HasIndex("EntityActionTypeRequiredFieldId");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityActionField", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ProcessOrder")
                        .HasColumnType("int");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityActionGroup", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroupCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<string>("CondetionValue")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ConditionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityActionGroupConditionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstSideFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FirstSideRelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("SecondSideRelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionTypeId");

                    b.HasIndex("EntityActionGroupConditionGroupId");

                    b.HasIndex("FirstSideRelatedToEntityId");

                    b.HasIndex("SecondSideRelatedToEntityId");

                    b.ToTable("EntityActionGroupCondition", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroupConditionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityActionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityActionGroupId");

                    b.ToTable("EntityActionGroupConditionGroup", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroupTriggerType", b =>
                {
                    b.Property<Guid>("EntityActionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TriggerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityActionGroupId", "TriggerTypeId");

                    b.HasIndex("TriggerTypeId");

                    b.ToTable("EntityActionGroupTriggerType", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("EntityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("EntityActionType", "Entity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("090e1ae7-3878-489a-ab85-8c9affb4a913"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityTypeId = new Guid("357d1ce2-3631-4021-9f49-ddb8be7fbd0f"),
                            IsStatic = true,
                            NameAr = "جدولة مكالمة جديدة",
                            NameEn = "Schedule New Call",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("0280d3e4-0b91-4a09-af6c-9493365722e9"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityTypeId = new Guid("357d1ce2-3631-4021-9f49-ddb8be7fbd0f"),
                            IsStatic = true,
                            NameAr = "حفظ نتيجة المكالمة بحالة ناجحة",
                            NameEn = "Save Call In Success Status",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("d8ee0ba8-5f2a-4691-a388-8616dbdf39ba"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityTypeId = new Guid("357d1ce2-3631-4021-9f49-ddb8be7fbd0f"),
                            IsStatic = true,
                            NameAr = "حفظ نتيجة المكالمة بحالة غير ناجحة",
                            NameEn = "Save Call In Not Success Status",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("63a13eb8-3949-42d1-a92a-aa3e93867f79"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityTypeId = new Guid("357d1ce2-3631-4021-9f49-ddb8be7fbd0f"),
                            IsStatic = true,
                            NameAr = "حفظ نتيجة المكالمة بحالة إعادة اتصال",
                            NameEn = "Save Call In Recall Status",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("12121212-1212-42d1-a92a-aa3e93867f79"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityTypeId = new Guid("357d1ce2-3631-4021-9f49-ddb8be7fbd0f"),
                            IsStatic = true,
                            NameAr = "إشعار بإنشاء فاتورة",
                            NameEn = "Notify On Bill Created",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionTypeRequiredField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityActionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("FieldShouldRelatedToEntityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EntityActionTypeId");

                    b.HasIndex("FieldShouldRelatedToEntityTypeId");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("EntityActionTypeRequiredField", "Entity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17b7dc0b-afe2-4ff5-b3d7-29cb93e04b74"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityActionTypeId = new Guid("090e1ae7-3878-489a-ab85-8c9affb4a913"),
                            FieldName = "حقل تاريخ جدولة المكالمة الجديدة",
                            FieldTypeId = new Guid("d4730e56-dcc3-42e8-af4a-a6b66edbb728"),
                            StateCode = (byte)1
                        },
                        new
                        {
                            Id = new Guid("dfbd996e-4e65-4261-b4d2-d5fd584035c6"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityActionTypeId = new Guid("090e1ae7-3878-489a-ab85-8c9affb4a913"),
                            FieldName = "حقل نوع المسار المراد إعادة الجدولة عليه",
                            FieldShouldRelatedToEntityTypeId = new Guid("357d1ce2-3631-4021-9f49-ddb8be7fbd0f"),
                            FieldTypeId = new Guid("d4730e56-dcc3-42e8-af4a-a6b66edbb728"),
                            StateCode = (byte)1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool?>("IsForSpecialSammaryReport")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsForVisitReport")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReportExportable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("RelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("Unified")
                        .HasColumnType("int");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityFieldGroupId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("RelatedToEntityId");

                    b.ToTable("EntityField", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("DynamicFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityFieldActionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityFieldActionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ProcessOrder")
                        .HasColumnType("int");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFunctionId");

                    b.HasIndex("EntityFieldActionGroupId");

                    b.HasIndex("EntityFieldActionTypeId");

                    b.ToTable("EntityFieldAction", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionDynamicFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("DynamicFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityFieldActionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFunctionId");

                    b.HasIndex("EntityFieldActionId");

                    b.ToTable("EntityFieldActionDynamicFunction", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionDynamicFunctionParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("DynamicFunctionParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityFieldActionDynamicFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityFieldActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFunctionParameterId");

                    b.HasIndex("EntityFieldActionDynamicFunctionId");

                    b.HasIndex("EntityFieldActionId");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityFieldActionDynamicFunctionParameter", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionDynamicFunctionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("DynamicFunctionResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityFieldActionDynamicFunctionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityFieldActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsPathResult")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPathValue")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsResultToNotification")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFunctionResultId");

                    b.HasIndex("EntityFieldActionDynamicFunctionId");

                    b.HasIndex("EntityFieldActionId");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityFieldActionDynamicFunctionResult", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityFieldActionTypeRequiredFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EntityFieldActionId");

                    b.HasIndex("EntityFieldActionTypeRequiredFieldId");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityFieldActionField", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ProcessOrder")
                        .HasColumnType("int");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityFieldActionGroup", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroupCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<string>("CondetionValue")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ConditionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldActionGroupConditionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstSideFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstSideRelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("SecondSideRelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionTypeId");

                    b.HasIndex("EntityFieldActionGroupConditionGroupId");

                    b.HasIndex("FirstSideRelatedToEntityId");

                    b.HasIndex("SecondSideRelatedToEntityId");

                    b.ToTable("EntityFieldActionGroupCondition", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroupConditionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldActionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityFieldActionGroupId");

                    b.ToTable("EntityFieldActionGroupConditionGroup", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroupTriggerType", b =>
                {
                    b.Property<Guid>("EntityFieldActionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TriggerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityFieldActionGroupId", "TriggerTypeId");

                    b.HasIndex("TriggerTypeId");

                    b.ToTable("EntityFieldActionGroupTriggerType", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityFieldActionType", "Entity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f4398fe-7940-4310-8149-40f71b5bb97b"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "تنفيذ إجراء ديناميكي",
                            NameEn = "Execute Dynamic Function",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionTypeRequiredField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldActionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("FieldShouldRelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EntityFieldActionTypeId");

                    b.HasIndex("FieldShouldRelatedToEntityId");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("EntityFieldActionTypeRequiredField", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<string>("CondetionValue")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConditionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldConditionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstSideFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstSideRelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SecondSideRelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionTypeId");

                    b.HasIndex("EntityFieldConditionGroupId");

                    b.HasIndex("FirstSideRelatedToEntityId");

                    b.HasIndex("SecondSideRelatedToEntityId");

                    b.ToTable("EntityFieldCondition", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldConditionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConditionForId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionForId");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityFieldConditionGroup", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityFieldGroup", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("RelatedEntityOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityFieldOption", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldOptionCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<string>("CondetionValue")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConditionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldOptionConditionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstSideFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstSideRelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SecondSideRelatedToEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionTypeId");

                    b.HasIndex("EntityFieldOptionConditionGroupId");

                    b.HasIndex("FirstSideRelatedToEntityId");

                    b.HasIndex("SecondSideRelatedToEntityId");

                    b.ToTable("EntityFieldOptionCondition", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldOptionConditionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("ANDorOR")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConditionForId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ConditionForId");

                    b.HasIndex("EntityFieldOptionId");

                    b.ToTable("EntityFieldOptionConditionGroup", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid>("EntityFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityPK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EntityFieldId");

                    b.ToTable("EntityFieldValue", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MappedEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelationName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("MappedEntityId");

                    b.ToTable("EntityMap", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityRelationBreak", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Entity2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Entity2PK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityPK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityId", "Entity2Id");

                    b.HasIndex("Entity2Id");

                    b.ToTable("EntityRelationBreak", "Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SchemaName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("TabelName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EntityType", "Entity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91b2ee8a-4126-4589-901b-993688d9efda"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "فاتورة المكالمة",
                            NameEn = "Call Bill",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "CallBill",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("cad78edc-6da3-4b03-8cfc-13ddcc229440"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "تقييم المكالمة",
                            NameEn = "Call Quality",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "CallQuality",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("73218b82-b075-4b0d-a3f0-fcb4a456e96e"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "معايير تقييم المكالمة",
                            NameEn = "Call Quality Criteria",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "CallQualityCriteria",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("316168b0-dd10-457a-9689-a9ce82be9073"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أجزاء معايير تقييم المكالمات",
                            NameEn = "Call Quality Criteria Part",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "CallQualityCriteriaPart",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("96bd359e-5060-41b7-b15c-041245df0a92"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "العملاء",
                            NameEn = "Contacts",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "Contact",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("872fb63a-a1ab-4031-ac30-5653b356fde9"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "العقود",
                            NameEn = "Contract",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "Contract",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("63e0a8a6-43e3-4718-b08a-e0f80f7f7f56"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "المكالمات التاريخية",
                            NameEn = "Historical Call",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "HistoricalCall",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("38ae3821-99b4-4167-813f-a51c9a36af92"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "التعليقات على المكالمات التاريخية",
                            NameEn = "Historical Call Comment",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "HistoricalCallComment",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("bec9374f-79bd-4b85-a476-5ac32f5e7e2f"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "المدفوعات",
                            NameEn = "Payment",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "Payment",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("38a84837-16ce-4fbb-99b2-5a595c95ecf0"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "المعلومات الشخصية",
                            NameEn = "Personal Info",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "PersonalInfo",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("83f6c13b-64c4-4ad1-af46-f55a7118e2c0"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "المكالمات المجدولة",
                            NameEn = "Scheduled Call",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "ScheduledCall",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("6509294e-df52-4524-826c-10e58e5b67d5"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الإعدادات",
                            NameEn = "Setting",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "Setting",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("ba4c4a9e-7a21-4183-ae97-4bc322581b20"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "إجراءات النظام",
                            NameEn = "System Progress",
                            SchemaName = "Application",
                            StateCode = (byte)1,
                            TabelName = "SystemProgress",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("b730380a-8f15-423a-884f-c2249eb2d58d"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الكيانات",
                            NameEn = "Entity",
                            SchemaName = "Entity",
                            StateCode = (byte)1,
                            TabelName = "Entity",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("a56cec1b-44e5-4fa3-b42d-485ec5eb37aa"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الدوال الديناميكية",
                            NameEn = "Dynamic Function",
                            SchemaName = "Entity",
                            StateCode = (byte)1,
                            TabelName = "DynamicFunction",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("a596f09b-e63f-42d8-86ca-875fd6eaf6d3"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "التقارير الديناميكية",
                            NameEn = "Dynamic Report",
                            SchemaName = "Entity",
                            StateCode = (byte)1,
                            TabelName = "DynamicReport",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("cb4ef3ce-fae8-4828-881c-f4b02f96f855"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع الأحداث على الكيانات",
                            NameEn = "Entity Action Type",
                            SchemaName = "Entity",
                            StateCode = (byte)1,
                            TabelName = "EntityActionType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("708593c8-baca-409c-b9be-325e05f48123"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع الأحداث على حقول الكيانات",
                            NameEn = "Entity Field Action Type",
                            SchemaName = "Entity",
                            StateCode = (byte)1,
                            TabelName = "EntityFieldActionType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("b67c5548-7098-48de-a86c-2ced19a40471"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الأدوار الوظيفية",
                            NameEn = "Role",
                            SchemaName = "Identity",
                            StateCode = (byte)1,
                            TabelName = "Role",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("38920507-73c0-4035-8639-d4f66bee9952"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "صلاحيات الأدوار الوظيفية",
                            NameEn = "Role Permission",
                            SchemaName = "Identity",
                            StateCode = (byte)1,
                            TabelName = "RolePermission",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("296f3487-44a7-4237-96d0-c2aeaa7ecaeb"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "المستخدمين",
                            NameEn = "User",
                            SchemaName = "Identity",
                            StateCode = (byte)1,
                            TabelName = "User",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("90e20a39-b72b-418b-beff-658ad0fbd7b5"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مسارات التصنيف للمستخدمين",
                            NameEn = "User Category Path",
                            SchemaName = "Identity",
                            StateCode = (byte)1,
                            TabelName = "UserCategoryPath",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("04e4943a-0d56-4ea9-b878-926d05c435f9"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "صلاحيات المستخدمين",
                            NameEn = "User Permission",
                            SchemaName = "Identity",
                            StateCode = (byte)1,
                            TabelName = "UserPermission",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("d1fded5f-88ca-4537-80f8-ddb6bf5b6ed5"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "إعدادات المستخدمين",
                            NameEn = "User Setting",
                            SchemaName = "Identity",
                            StateCode = (byte)1,
                            TabelName = "UserSetting",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("7e532c9d-8101-4294-8c73-cf04f0c64c95"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "فرق المستخدمين",
                            NameEn = "User Teams",
                            SchemaName = "Identity",
                            StateCode = (byte)1,
                            TabelName = "UserTeams",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("90431599-2fbf-4c2c-98ee-d20c469551bc"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "سجلات تحميل المستفيدين",
                            NameEn = "Contact Uploading Log",
                            SchemaName = "Log",
                            StateCode = (byte)1,
                            TabelName = "ContactUploadingLog",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("1fcc2bfb-bb08-44f3-b99e-804c6ab5df8d"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "سجلات تحديثات العقود",
                            NameEn = "Contract History",
                            SchemaName = "Log",
                            StateCode = (byte)1,
                            TabelName = "ContractHistory",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("77527367-7cfd-416c-be58-9780bdad879b"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "سجلات تحديثات المعلومات الشخصية",
                            NameEn = "Personal Info Log",
                            SchemaName = "Log",
                            StateCode = (byte)1,
                            TabelName = "PersonalInfoLog",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("f91ccfaf-9260-4baf-b9df-9f27715ac092"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "سجلات إرسال الرسائل النصية",
                            NameEn = "SMS Sent Log",
                            SchemaName = "Log",
                            StateCode = (byte)1,
                            TabelName = "SMSSentLog",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("6fc1c72c-780a-4877-bf65-803f913d5190"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "حالات المكالمات",
                            NameEn = "Call Status",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "CallStatus",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("7c535ca0-56c0-4b53-a3b3-c66ef12d389e"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع المكالمات",
                            NameEn = "Call Type",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "CallType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("1e648ce3-267c-44ad-940a-9aa3148a8519"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الحملات",
                            NameEn = "Campaign",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Campaign",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("1c28bc30-d216-4812-a292-8e8e2c02c5e1"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "التصنيفات",
                            NameEn = "Category",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Category",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("357d1ce2-3631-4021-9f49-ddb8be7fbd0f"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مسارات التصنيفات",
                            NameEn = "Category Path",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "CategoryPath",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("caec39b5-2bfe-43d7-8fb8-ccd455f66312"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "المدن",
                            NameEn = "City",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "City",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("6ffe76fa-7c3b-4ff9-9fb5-e9851beb5327"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الشروط لـ",
                            NameEn = "Condition For",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "ConditionFor",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("caecbb8c-a116-49c8-8d05-1e75ca9b573f"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع الشروط",
                            NameEn = "Condition Type",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "ConditionType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("dacf4e52-019e-4bda-ae72-f22b135cc9b8"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "حالة العقد",
                            NameEn = "Contract Status",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "ContractType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("70ebe78c-f361-46e6-be83-faf7affd693e"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "نوع العقد",
                            NameEn = "Contract Type",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "ContractStatus",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("f0a695d9-a73c-4e2c-992d-c23c85853e70"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "البلاد",
                            NameEn = "Country",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Country",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("4605c6b9-afdc-4baa-bac9-2ed38a16cf8e"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "قطاع العمل",
                            NameEn = "Employer Sector",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "EmployerSector",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("e857c3ca-be15-41af-8f93-306b94c85cfc"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "جهة العمل",
                            NameEn = "Employer Type",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "EmployerType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("2632b95e-2ff7-4b4f-9422-3ecebd856fc9"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع الحقول",
                            NameEn = "Field Type",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "FieldType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("357ab406-6e13-48f1-be88-6c1cbd97654d"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الأجناس",
                            NameEn = "Gender",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Gender",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("f9ffd0b6-1223-43a9-b214-d5d0b9498902"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "حالة التأمينات",
                            NameEn = "Insurance Status",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "InsuranceStatus",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("1a9b70a2-1d02-49bc-9aeb-64cee6cb9b09"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "حلول القرض",
                            NameEn = "Loan Time Status",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "LoanTimeStatus",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("50e6cef1-da4e-4bb3-8e26-c8d80ce41e20"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الجنسيات",
                            NameEn = "Nationality",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Nationality",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("bc800b0e-8743-4e3d-86a3-7ce3946bc76b"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "بوابات الدفع",
                            NameEn = "Payment Gateway",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "PaymentGateway",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("cb444b0b-2c22-41bd-86db-131e401e5f71"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "طرق الدفع",
                            NameEn = "Payment Method",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "PaymentMethod",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("92aabbd9-b890-4118-9ce8-c8e6862dc11e"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الصلاحيات",
                            NameEn = "Permission",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Permission",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("c32068b2-e391-460d-9e08-1d92bc33746b"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الأولويات",
                            NameEn = "Priority",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Priority",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("60c47180-b24f-47ca-bd37-77edfaf257f0"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع تسجيلات المستخدمين",
                            NameEn = "Registration Type",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "RegistrationType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("f7a5b0cb-b0c7-4744-81c3-d9b3f67a6612"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "حالة التقاعد",
                            NameEn = "Retirement Status",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "RetirementStatus",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("48564202-568f-4e84-94d0-518cc61631cd"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع الرضى",
                            NameEn = "Satisfaction",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Satisfaction",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("b3918956-0106-4c6a-8e79-b02a5d9759c5"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع الإعدادات",
                            NameEn = "Setting Type",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "SettingType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("25254ee1-f98c-4800-a3be-bff0f306b6bf"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع التعثرات",
                            NameEn = "Stumble Type",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "StumbleType",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("e8aa01af-6578-4912-b9cb-6601779ec1b8"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الملاءة المالية",
                            NameEn = "Solvency",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Solvency",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("376ccb5d-408f-4c15-b0f6-289f5b4c2f99"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "الفرق",
                            NameEn = "Team",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "Team",
                            ViewOrder = 0
                        },
                        new
                        {
                            Id = new Guid("dd6a0c1a-9c1b-4f8b-af33-1907c0e6e024"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أنواع الإجراءات",
                            NameEn = "Trigger Type",
                            SchemaName = "Lookup",
                            StateCode = (byte)1,
                            TabelName = "TriggerType",
                            ViewOrder = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDefualt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b57d5da1-98e7-4c98-ac00-104919cb8e8d"),
                            ConcurrencyStamp = "1e0a9742-eedd-4389-a1b3-5c9fd3e6ca61",
                            IsDefualt = false,
                            IsStatic = true,
                            Name = "System",
                            NameAr = "النظام",
                            NormalizedName = "system",
                            StateCode = (byte)0
                        },
                        new
                        {
                            Id = new Guid("24e65b31-a815-4fb0-a5fa-4b78aab03c72"),
                            ConcurrencyStamp = "4f421dc4-9f03-4d54-898a-caf3ad286a2d",
                            IsDefualt = false,
                            IsStatic = true,
                            Name = "SuperAdmin",
                            NameAr = "مسؤول النظام",
                            NormalizedName = "superadmin",
                            StateCode = (byte)0
                        },
                        new
                        {
                            Id = new Guid("5918287c-140d-4938-a8ee-d3a3099ec957"),
                            ConcurrencyStamp = "6c4191c2-5d95-40d6-bccc-006b7faf8a16",
                            IsDefualt = false,
                            IsStatic = true,
                            Name = "Admin",
                            NameAr = "المسؤول",
                            NormalizedName = "admin",
                            StateCode = (byte)1
                        },
                        new
                        {
                            Id = new Guid("93b91e52-5850-4190-9e87-2a1bfbd81910"),
                            ConcurrencyStamp = "e3f6e940-5380-41eb-98be-601439d614e9",
                            IsDefualt = false,
                            IsStatic = true,
                            Name = "Supervisor",
                            NameAr = "المشرف",
                            NormalizedName = "supervisor",
                            StateCode = (byte)1
                        },
                        new
                        {
                            Id = new Guid("6fdd3e8a-ebfc-4fe5-8a48-ed2bde9fb2ad"),
                            ConcurrencyStamp = "f9cb65bf-3071-42ff-a952-a166e99077e3",
                            IsDefualt = false,
                            IsStatic = true,
                            Name = "Leader",
                            NameAr = "قائد الفريق",
                            NormalizedName = "leader",
                            StateCode = (byte)1
                        },
                        new
                        {
                            Id = new Guid("746f79ee-bc4a-4e58-95d2-01c73cf3a868"),
                            ConcurrencyStamp = "10a464f7-65af-4423-9325-49482bf51fed",
                            IsDefualt = false,
                            IsStatic = true,
                            Name = "Reporter",
                            NameAr = "منظم التقارير",
                            NormalizedName = "reporter",
                            StateCode = (byte)0
                        },
                        new
                        {
                            Id = new Guid("ad0b3b57-295f-4312-bba1-b09a11865237"),
                            ConcurrencyStamp = "2bb13d4b-8187-4420-998a-335182d1a71e",
                            IsDefualt = true,
                            IsStatic = true,
                            Name = "Employee",
                            NameAr = "موظف",
                            NormalizedName = "employee",
                            StateCode = (byte)1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("DirectLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Extension")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsHasSpecialPermissions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LatestLoggedInDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LatestPasswordChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHint")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("WrongPassTry")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastModifiedByUserId")
                        .IsUnique()
                        .HasFilter("[LastModifiedByUserId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76c52b9b-21df-4f45-8220-d2755f39860c",
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "System@System",
                            EmailConfirmed = false,
                            EmployeeNumber = "1",
                            IsHasSpecialPermissions = false,
                            IsLoggedIn = false,
                            IsStatic = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "System",
                            PersonalInfoId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            PhoneNumberConfirmed = false,
                            StateCode = (byte)1,
                            TwoFactorEnabled = false,
                            UserName = "System"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCategory");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermission", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserRealTime", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SignalRId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.HasKey("UserId", "SignalRId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("UserRealTime", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserSetting", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId", "SettingTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("SettingTypeId");

                    b.ToTable("UserSetting", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserTeams", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeams", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Log.ContactUploadingLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DescriptionOthers")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FileName")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("FileRow")
                        .HasColumnType("int");

                    b.Property<bool>("IsUploadedSuccessfully")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("SystemProgressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SystemProgressId");

                    b.ToTable("ContactUploadingLog", "Log");
                });

            modelBuilder.Entity("Domain.Entities.Log.HistoricalCallGeneralReportSammary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("CallDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("CallDuration")
                        .HasColumnType("float");

                    b.Property<string>("CallDurationString")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CallEndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CallStartAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CallStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CallStatusName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CallStatusOtherNote")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallStatusResult")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CallStatusResultSub")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("CallTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CallUpload")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampaignName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactIdentity")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactPhone1")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactPhone2")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("HistoricalCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeaderName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PriorityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubCallStatusName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CallStatusId");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId");

                    b.HasIndex("HistoricalCallId");

                    b.HasIndex("LeaderId");

                    b.HasIndex("UserId");

                    b.ToTable("HistoricalCallGeneralReportSammary", "Log");
                });

            modelBuilder.Entity("Domain.Entities.Log.Pim_contact_attempts_history", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Agent_id")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("AutoContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CallDuration")
                        .HasColumnType("float");

                    b.Property<Guid>("CallTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Call_completion_time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Call_start_time")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Campaign_id")
                        .HasColumnType("int");

                    b.Property<int?>("Campaign_list_id")
                        .HasColumnType("int");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Completion_Code_Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Completion_Code_Name_Ar")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Completion_Code_id")
                        .HasColumnType("int");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Contact_attempt_time")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("HistoricalCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Last_nw_disposition_time")
                        .HasColumnType("datetime2");

                    b.Property<long>("Pim_session_id")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ScheduledCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Sys_completion_code_id")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AutoContactId");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId");

                    b.HasIndex("HistoricalCallId");

                    b.HasIndex("ScheduledCallId");

                    b.HasIndex("UserId");

                    b.ToTable("Pim_contact_attempts_history", "Log");
                });

            modelBuilder.Entity("Domain.Entities.Log.Pim_contact_attempts_historyLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Agent_id")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("CallDuration")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Call_completion_time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Call_start_time")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Campaign_id")
                        .HasColumnType("int");

                    b.Property<int?>("Campaign_list_id")
                        .HasColumnType("int");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Completion_Code_Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Completion_Code_Name_Ar")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Completion_Code_id")
                        .HasColumnType("int");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Contact_attempt_time")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<Guid?>("HistoricalCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Last_nw_disposition_time")
                        .HasColumnType("datetime2");

                    b.Property<long>("Pim_session_id")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ScheduledCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Sys_completion_code_id")
                        .HasColumnType("int");

                    b.Property<string>("Ucid")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId");

                    b.HasIndex("HistoricalCallId");

                    b.HasIndex("UserId");

                    b.ToTable("Pim_contact_attempts_historyLog", "Log");
                });

            modelBuilder.Entity("Domain.Entities.Log.ScheduledCallLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("AssignFromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignToUserAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AssignToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("BodyHTML")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("CallStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CallStatusName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("CallTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampaignName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactIdentity")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactMobile")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LatestHistoricalCallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriorityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ScheduledByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledCallDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScheduledToIPAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ScheduledToUserAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ScheduledToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignFromUserId");

                    b.HasIndex("AssignToUserId");

                    b.HasIndex("CallStatusId");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId");

                    b.HasIndex("LatestHistoricalCallId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ScheduledByUserId");

                    b.HasIndex("ScheduledToUserId");

                    b.ToTable("ScheduledCallLog");
                });

            modelBuilder.Entity("Domain.Entities.Log.nhc_agentless_can", b =>
                {
                    b.Property<Guid>("IdGu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UCID")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("agentid")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("callernumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("channel")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("evalresult1")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("evalresult2")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("submitdate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdGu");

                    b.ToTable("nhc_agentless_can", "Log");
                });

            modelBuilder.Entity("Domain.Entities.Log.nhc_interest_camp", b =>
                {
                    b.Property<Guid>("IdGu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UCID")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Visited_Note")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("agentid")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("callernumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("submitdate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdGu");

                    b.ToTable("nhc_interest_camp", "Log");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.AVAYAAURACampaignPredictive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsPredictive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameInAvayaSystem")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AVAYAAURACampaignPredictive", "Lookup");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.AppSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SectionName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppSetting", "Lookup");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.CallStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CallStatus", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c027c7d-59a2-4319-a876-b22015611f97"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مجدولة الآن",
                            NameEn = "Queued In System",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("9d7064b9-a41a-4b76-9889-d26750f3eca6"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مجدولة الآن (التنبؤي)",
                            NameEn = "Queued In Dialer",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("d252adcd-cb7c-45bb-a1f7-d7905a14e348"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مجدولة تاريخياً",
                            NameEn = "Scheduled In System",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("29dc61d3-de6b-4385-bb40-0ce35ecb4625"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مجدولة تاريخياً (التنبؤي)",
                            NameEn = "Scheduled In Dialer",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("123c61d3-de6b-4385-bb40-0ce35ecb4625"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "غير ناجحة (التنبؤي)",
                            NameEn = "Scheduled In Dialer",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("75bad3f5-23cb-47e7-8485-a83e14e325d3"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مسندة",
                            NameEn = "Assigned",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("2cd4cc0e-afbd-4a72-b930-8911662a4fcf"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "إعادة اتصال",
                            NameEn = "Recall",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("b8151e6f-6415-4b46-9b74-5dae2e47d072"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "ناجحة",
                            NameEn = "Success",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("df1523df-5fc3-41fc-a2d0-b3937ca4228f"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "غير ناجحة",
                            NameEn = "Not Success",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lookup.CallType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CallType", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ac144c5-5ea4-4ca3-a8a3-0b2f173dd6db"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مكالمة متصل تنبؤي",
                            NameEn = "Normal Call",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("b22c1515-23d2-452b-82f5-5f2999582f8d"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مكالمة تلقائي",
                            NameEn = "Auto Call",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("331c1515-23d2-452b-82f5-5f2999582f8d"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مكالمة تحصيل - متابعة",
                            NameEn = "Collecting Call Followup",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.ToTable("Campaign", "Lookup");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("AVAYAAURACampaignPredictiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CallCategoryMainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CallTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryPathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AVAYAAURACampaignPredictiveId");

                    b.HasIndex("CallCategoryMainId");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("CategoryPathId");

                    b.HasIndex("PriorityId");

                    b.ToTable("Category", "Lookup");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.CategoryPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CategoryPath", "Lookup");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("City", "Lookup");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.ConditionFor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConditionFor", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e6a7ddf-d4a2-49d8-81b1-195bc9eb63b6"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "تعطيل",
                            NameEn = "Disabel",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("df704671-910c-4625-8ce7-577aa2ca95ad"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "للقراءة فقط",
                            NameEn = "ReadOnly",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("8ce24129-c34f-4ed2-94ae-1a8d8fb81182"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "إجباري",
                            NameEn = "Required",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("b1d9a26b-745a-4a5e-bfb7-b3519a7c0e47"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "اختيار",
                            NameEn = "Select",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("32ce529a-107e-4242-bd48-00d87d85e68c"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عرض",
                            NameEn = "Show",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("ce8d37c5-66c8-41e9-ade0-cb8d6d13ffa9"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "تنفيذ",
                            NameEn = "Execute",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lookup.ConditionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConditionType", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("059f4279-53da-4d31-bac3-cf75092b9e44"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "يحتوي",
                            NameEn = "Contain",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("7cbdb20f-8790-4193-8bca-4adb1ea743a9"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "يساوي",
                            NameEn = "Equal",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("45fa4a17-8a36-4a2b-a5fb-c389f65c6bf9"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "ضمن",
                            NameEn = "In",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("b47b64a4-da48-4d66-9972-532c8f23eec3"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أقل من",
                            NameEn = "Less Than",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("f29b0cea-10f5-4a62-90e2-6377f644b2a3"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أقل من أو يساوي",
                            NameEn = "Less Than Or Equal",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("c03cfa6a-8125-458b-85dc-babc046417bf"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أكبر من",
                            NameEn = "MoreThan",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("55899e39-2eb5-42c4-a090-f719457b865f"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "أكبر من أو يساوي",
                            NameEn = "More Than Or Equal",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("df540314-dfa9-4a2d-bc82-863bbb77b271"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "لا يساوي",
                            NameEn = "Not Equal",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("0f979f1c-4419-420e-81d2-0ce99048049f"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "غير فارغ",
                            NameEn = "Not Null",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("47d75e03-d7a1-467f-a870-5cf451b552a6"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "فارغ",
                            NameEn = "Null",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lookup.ContactCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContactCategory");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.FieldType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FieldType", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92a1f535-6c86-4489-a494-afcd1165334a"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "زر",
                            NameEn = "Button",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("66326b14-7fa5-45f4-b3df-92f364b146d8"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "خيار اختياري (CheckBox)",
                            NameEn = "CheckBox",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("0caa25d9-befb-4096-9041-c05e7b4da188"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "خيارات متعددة (CheckBox)",
                            NameEn = "CheckBox Group",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("f9e4efb5-f7c4-44d5-9c35-febfbfc7f834"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "تاريخ",
                            NameEn = "Date",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("d4730e56-dcc3-42e8-af4a-a6b66edbb728"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "تاريخ ووقت",
                            NameEn = "DateTime",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("45de289b-67b3-406f-aa95-b01a857fdf74"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عنوان",
                            NameEn = "Label",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("9eaed8a2-517b-48c8-bfb8-eb2344a79804"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "خيارات متعددة (Select)",
                            NameEn = "MultibelSelect",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("2bccee4a-8236-486e-9691-da019d679600"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "رقم",
                            NameEn = "Number",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("d448dd89-168e-47eb-9425-36a4074cd853"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "اختيار واحد (Select)",
                            NameEn = "One Select",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("fb14e732-8d25-4ffb-bd63-b5e6e09cf231"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "اختيار واحد (Radio)",
                            NameEn = "Radio Button",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("bc557ce6-adb6-4a98-9214-639534862014"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "نص",
                            NameEn = "Text",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("61e80126-233e-4143-94bc-e906c1e64b03"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "نص كبير",
                            NameEn = "Text Area",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("24a3e2ce-c8d2-485d-9bfb-028ad5ae5444"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "وقت",
                            NameEn = "Time",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("b040939f-d7eb-47cc-9a5a-f063db7fdd8e"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "قائمة نصية",
                            NameEn = "View List",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("061beaca-01b1-443a-a5f9-bd636b8ee9b1"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "ملف",
                            NameEn = "File",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Permission", "Lookup");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Priority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Priority", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f2c90ee-4842-4797-8da8-c3dffb331609"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "استثنائي جداً",
                            NameEn = "Very Special",
                            Number = 1,
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("5f2ca633-4842-4797-8da8-c3dffb331609"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "استثنائي",
                            NameEn = "Special",
                            Number = 2,
                            StateCode = (byte)1,
                            ViewOrder = 2
                        },
                        new
                        {
                            Id = new Guid("5f2c9033-4842-4797-8da8-c3dffb331609"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مهم جداً",
                            NameEn = "Important",
                            Number = 3,
                            StateCode = (byte)1,
                            ViewOrder = 3
                        },
                        new
                        {
                            Id = new Guid("b44b633e-a94a-4dac-a093-5650aa8184eb"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "مهم",
                            NameEn = "Important",
                            Number = 4,
                            StateCode = (byte)1,
                            ViewOrder = 4
                        },
                        new
                        {
                            Id = new Guid("6aeb7f2a-5a60-4086-8320-55120317806e"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عادي",
                            NameEn = "Normal",
                            Number = 5,
                            StateCode = (byte)1,
                            ViewOrder = 5
                        },
                        new
                        {
                            Id = new Guid("64cd40dd-747a-46c7-a91d-123febad6d44"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "غير مهم",
                            NameEn = "Low",
                            Number = 6,
                            StateCode = (byte)1,
                            ViewOrder = 6
                        },
                        new
                        {
                            Id = new Guid("71bd4bae-361c-41a9-bd54-22c29eea602a"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "غير مهم أبداً",
                            NameEn = "Very Low",
                            Number = 7,
                            StateCode = (byte)1,
                            ViewOrder = 7
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lookup.SettingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SettingType", "Lookup");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("Team", "Lookup");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.TriggerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("StateCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TriggerType", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bab8ff2-8ddf-4691-b704-7c29526605f2"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عند الإنشاء",
                            NameEn = "On Create",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("125572ee-3743-4d03-b4f8-f003fa3d22ad"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عند التحديث",
                            NameEn = "On Update",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("2fdd7ad8-a254-490e-ba65-cd4971811658"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عند الحذف",
                            NameEn = "On Delete",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("8e40406e-7ab8-405c-b6c8-3e4cd7db5ef3"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عند الاستعراض",
                            NameEn = "On View",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("51a7be15-439d-4300-aea3-0b6c9dd91b57"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عند التفعيل",
                            NameEn = "On Activate",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("4ea813d4-a0c6-4ee2-97d6-8f5756e23896"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عند التعطيل",
                            NameEn = "On DeActivate",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("817e4b7f-c425-4774-ba93-ca4aedea160d"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عند الضغط على",
                            NameEn = "On Click",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        },
                        new
                        {
                            Id = new Guid("78055fed-079a-43b2-a0b3-69fc7f38744d"),
                            CreatedByUserId = new Guid("3abfa071-e941-48e6-a492-b6cad5debf61"),
                            CreatedOn = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsStatic = true,
                            NameAr = "عند الإرسال",
                            NameEn = "On Submit",
                            StateCode = (byte)1,
                            ViewOrder = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Application.AutoContact", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lookup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Application.ScheduledCall", "ScheduledCall")
                        .WithMany()
                        .HasForeignKey("ScheduledCallId");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("ScheduledCall");
                });

            modelBuilder.Entity("Domain.Entities.Application.Contact", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.ContactCategory", "ContactCategory")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactCategoryId");

                    b.HasOne("Domain.Entities.Application.PersonalInfo", "PersonalInfo")
                        .WithOne("Contact")
                        .HasForeignKey("Domain.Entities.Application.Contact", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContactCategory");

                    b.Navigation("PersonalInfo");
                });

            modelBuilder.Entity("Domain.Entities.Application.HistoricalCall", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", "AssignFromUser")
                        .WithMany()
                        .HasForeignKey("AssignFromUserId");

                    b.HasOne("Domain.Entities.Identity.User", "AssignToUser")
                        .WithMany()
                        .HasForeignKey("AssignToUserId");

                    b.HasOne("Domain.Entities.Lookup.CallStatus", "CallStatus")
                        .WithMany("HistoricalCalls")
                        .HasForeignKey("CallStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookup.CallType", "CallType")
                        .WithMany("HistoricalCalls")
                        .HasForeignKey("CallTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Lookup.Campaign", "Campaign")
                        .WithMany("HistoricalCalls")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Lookup.Category", "Category")
                        .WithMany("HistoricalCalls")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Application.Contact", "Contact")
                        .WithMany("HistoricalCalls")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Application.HistoricalCall", "LatestHistoricalCall")
                        .WithMany("HistoricalCalls_LatestHistoricalCall")
                        .HasForeignKey("LatestHistoricalCallId");

                    b.HasOne("Domain.Entities.Lookup.Priority", "Priority")
                        .WithMany("HistoricalCalls")
                        .HasForeignKey("PriorityId");

                    b.HasOne("Domain.Entities.Identity.User", "ScheduledByUser")
                        .WithMany()
                        .HasForeignKey("ScheduledByUserId");

                    b.HasOne("Domain.Entities.Identity.User", "ScheduledToUser")
                        .WithMany()
                        .HasForeignKey("ScheduledToUserId");

                    b.Navigation("AssignFromUser");

                    b.Navigation("AssignToUser");

                    b.Navigation("CallStatus");

                    b.Navigation("CallType");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("LatestHistoricalCall");

                    b.Navigation("Priority");

                    b.Navigation("ScheduledByUser");

                    b.Navigation("ScheduledToUser");
                });

            modelBuilder.Entity("Domain.Entities.Application.HistoricalCallPathResult", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("HistoricalCallPathResults")
                        .HasForeignKey("EntityFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Application.HistoricalCall", "HistoricalCall")
                        .WithMany("HistoricalCallPathResults")
                        .HasForeignKey("HistoricalCallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityField");

                    b.Navigation("HistoricalCall");
                });

            modelBuilder.Entity("Domain.Entities.Application.PersonalInfo", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.City", "City")
                        .WithMany("PersonalInfos")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.Application.ScheduledCall", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", "AssignFromUser")
                        .WithMany()
                        .HasForeignKey("AssignFromUserId");

                    b.HasOne("Domain.Entities.Identity.User", "AssignToUser")
                        .WithMany()
                        .HasForeignKey("AssignToUserId");

                    b.HasOne("Domain.Entities.Lookup.CallStatus", "CallStatus")
                        .WithMany("ScheduledCalls")
                        .HasForeignKey("CallStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookup.CallType", "CallType")
                        .WithMany("ScheduledCalls")
                        .HasForeignKey("CallTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Lookup.Campaign", "Campaign")
                        .WithMany("ScheduledCalls")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Lookup.Category", "Category")
                        .WithMany("ScheduledCalls")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Application.Contact", "Contact")
                        .WithMany("ScheduledCalls")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Application.HistoricalCall", "LatestHistoricalCall")
                        .WithMany("ScheduledCalls_LatestHistoricalCall")
                        .HasForeignKey("LatestHistoricalCallId");

                    b.HasOne("Domain.Entities.Lookup.Priority", "Priority")
                        .WithMany("ScheduledCalls")
                        .HasForeignKey("PriorityId");

                    b.HasOne("Domain.Entities.Identity.User", "ScheduledByUser")
                        .WithMany()
                        .HasForeignKey("ScheduledByUserId");

                    b.HasOne("Domain.Entities.Identity.User", "ScheduledToUser")
                        .WithMany()
                        .HasForeignKey("ScheduledToUserId");

                    b.Navigation("AssignFromUser");

                    b.Navigation("AssignToUser");

                    b.Navigation("CallStatus");

                    b.Navigation("CallType");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("LatestHistoricalCall");

                    b.Navigation("Priority");

                    b.Navigation("ScheduledByUser");

                    b.Navigation("ScheduledToUser");
                });

            modelBuilder.Entity("Domain.Entities.Application.SystemProgress", b =>
                {
                    b.HasOne("Domain.Entities.Entity.Entity", "Entity")
                        .WithMany("SystemProgresses")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicFunctionParameter", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicFunction", "DynamicFunction")
                        .WithMany("DynamicFunctionParameters")
                        .HasForeignKey("DynamicFunctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DynamicFunction");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicFunctionResult", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicFunction", "DynamicFunction")
                        .WithMany("DynamicFunctionResults")
                        .HasForeignKey("DynamicFunctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DynamicFunction");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicReport", b =>
                {
                    b.HasOne("Domain.Entities.Entity.Entity", "Entity")
                        .WithMany("DynamicReports")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicReportField", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicReport", "DynamicReport")
                        .WithMany("DynamicReportFields")
                        .HasForeignKey("DynamicReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityMap", "EntityMap")
                        .WithMany("DynamicReportFields")
                        .HasForeignKey("EntityMapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DynamicReport");

                    b.Navigation("EntityMap");
                });

            modelBuilder.Entity("Domain.Entities.Entity.Entity", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityType", "EntityType")
                        .WithMany("Entitys")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityAction", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicFunction", "DynamicFunction")
                        .WithMany("EntityActions")
                        .HasForeignKey("DynamicFunctionId");

                    b.HasOne("Domain.Entities.Entity.EntityActionGroup", "EntityActionGroup")
                        .WithMany("EntityActions")
                        .HasForeignKey("EntityActionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityActionType", "EntityActionType")
                        .WithMany("EntityActions")
                        .HasForeignKey("EntityActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DynamicFunction");

                    b.Navigation("EntityActionGroup");

                    b.Navigation("EntityActionType");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionDynamicFunctionParameter", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicFunctionParameter", "DynamicFunctionParameter")
                        .WithMany("EntityActionDynamicFunctionParameters")
                        .HasForeignKey("DynamicFunctionParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityAction", "EntityAction")
                        .WithMany("EntityActionDynamicFunctionParameters")
                        .HasForeignKey("EntityActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("EntityActionDynamicFunctionParameters")
                        .HasForeignKey("EntityFieldId");

                    b.Navigation("DynamicFunctionParameter");

                    b.Navigation("EntityAction");

                    b.Navigation("EntityField");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionDynamicFunctionResult", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicFunctionResult", "DynamicFunctionResult")
                        .WithMany("EntityActionDynamicFunctionResults")
                        .HasForeignKey("DynamicFunctionResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityAction", "EntityAction")
                        .WithMany("EntityActionDynamicFunctionResults")
                        .HasForeignKey("EntityActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("EntityActionDynamicFunctionResults")
                        .HasForeignKey("EntityFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DynamicFunctionResult");

                    b.Navigation("EntityAction");

                    b.Navigation("EntityField");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionField", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityAction", "EntityAction")
                        .WithMany("EntityActionFields")
                        .HasForeignKey("EntityActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityActionTypeRequiredField", "EntityActionTypeRequiredField")
                        .WithMany("EntityActionFields")
                        .HasForeignKey("EntityActionTypeRequiredFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityField", null)
                        .WithMany("EntityActionFields")
                        .HasForeignKey("EntityFieldId");

                    b.Navigation("EntityAction");

                    b.Navigation("EntityActionTypeRequiredField");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroup", b =>
                {
                    b.HasOne("Domain.Entities.Entity.Entity", "Entity")
                        .WithMany("EntityActionGroups")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroupCondition", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.ConditionType", "ConditionType")
                        .WithMany("EntityActionConditions")
                        .HasForeignKey("ConditionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityActionGroupConditionGroup", "EntityActionGroupConditionGroup")
                        .WithMany("EntityActionConditions")
                        .HasForeignKey("EntityActionGroupConditionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "FirstSideRelatedToEntity")
                        .WithMany("FirstSideRelatedToEntity_EntityActionConditions")
                        .HasForeignKey("FirstSideRelatedToEntityId");

                    b.HasOne("Domain.Entities.Entity.Entity", "SecondSideRelatedToEntity")
                        .WithMany("SecondSideRelatedToEntity_EntityActionConditions")
                        .HasForeignKey("SecondSideRelatedToEntityId");

                    b.Navigation("ConditionType");

                    b.Navigation("EntityActionGroupConditionGroup");

                    b.Navigation("FirstSideRelatedToEntity");

                    b.Navigation("SecondSideRelatedToEntity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroupConditionGroup", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityActionGroup", "EntityActionGroup")
                        .WithMany("EntityActionGroupConditionGroups")
                        .HasForeignKey("EntityActionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityActionGroup");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroupTriggerType", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityActionGroup", "EntityActionGroup")
                        .WithMany("EntityActionGroupTriggerTypes")
                        .HasForeignKey("EntityActionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lookup.TriggerType", "TriggerType")
                        .WithMany("EntityActionGroupTriggerTypes")
                        .HasForeignKey("TriggerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityActionGroup");

                    b.Navigation("TriggerType");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionType", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityType", "EntityType")
                        .WithMany("EntityActionTypes")
                        .HasForeignKey("EntityTypeId");

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionTypeRequiredField", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityActionType", "EntityActionType")
                        .WithMany("EntityActionTypeRequiredFields")
                        .HasForeignKey("EntityActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityType", "FieldShouldRelatedToEntityType")
                        .WithMany("EntityActionTypeRequiredFields")
                        .HasForeignKey("FieldShouldRelatedToEntityTypeId");

                    b.HasOne("Domain.Entities.Lookup.FieldType", "FieldType")
                        .WithMany("EntityActionTypeRequiredFields")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityActionType");

                    b.Navigation("FieldShouldRelatedToEntityType");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityField", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityFieldGroup", "EntityFieldGroup")
                        .WithMany("EntityFields")
                        .HasForeignKey("EntityFieldGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lookup.FieldType", "FieldType")
                        .WithMany("EntityFields")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityType", "RelatedToEntity")
                        .WithMany("EntityFields")
                        .HasForeignKey("RelatedToEntityId");

                    b.Navigation("EntityFieldGroup");

                    b.Navigation("FieldType");

                    b.Navigation("RelatedToEntity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldAction", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicFunction", "DynamicFunction")
                        .WithMany("EntityFieldActions")
                        .HasForeignKey("DynamicFunctionId");

                    b.HasOne("Domain.Entities.Entity.EntityFieldActionGroup", "EntityFieldActionGroup")
                        .WithMany("EntityFieldActions")
                        .HasForeignKey("EntityFieldActionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityFieldActionType", "EntityFieldActionType")
                        .WithMany("EntityFieldActions")
                        .HasForeignKey("EntityFieldActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DynamicFunction");

                    b.Navigation("EntityFieldActionGroup");

                    b.Navigation("EntityFieldActionType");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionDynamicFunction", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicFunction", "DynamicFunction")
                        .WithMany()
                        .HasForeignKey("DynamicFunctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityFieldAction", "EntityFieldAction")
                        .WithMany()
                        .HasForeignKey("EntityFieldActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DynamicFunction");

                    b.Navigation("EntityFieldAction");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionDynamicFunctionParameter", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicFunctionParameter", "DynamicFunctionParameter")
                        .WithMany("EntityFieldActionDynamicFunctionParameters")
                        .HasForeignKey("DynamicFunctionParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityFieldActionDynamicFunction", null)
                        .WithMany("EntityFieldActionDynamicFunctionParameters")
                        .HasForeignKey("EntityFieldActionDynamicFunctionId");

                    b.HasOne("Domain.Entities.Entity.EntityFieldAction", "EntityFieldAction")
                        .WithMany("EntityFieldActionDynamicFunctionParameters")
                        .HasForeignKey("EntityFieldActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("EntityFieldActionDynamicFunctionParameters")
                        .HasForeignKey("EntityFieldId");

                    b.Navigation("DynamicFunctionParameter");

                    b.Navigation("EntityField");

                    b.Navigation("EntityFieldAction");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionDynamicFunctionResult", b =>
                {
                    b.HasOne("Domain.Entities.Entity.DynamicFunctionResult", "DynamicFunctionResult")
                        .WithMany("EntityFieldActionDynamicFunctionResults")
                        .HasForeignKey("DynamicFunctionResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityFieldActionDynamicFunction", null)
                        .WithMany("EntityFieldActionDynamicFunctionResults")
                        .HasForeignKey("EntityFieldActionDynamicFunctionId");

                    b.HasOne("Domain.Entities.Entity.EntityFieldAction", "EntityFieldAction")
                        .WithMany("EntityFieldActionDynamicFunctionResults")
                        .HasForeignKey("EntityFieldActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("EntityFieldActionDynamicFunctionResults")
                        .HasForeignKey("EntityFieldId");

                    b.Navigation("DynamicFunctionResult");

                    b.Navigation("EntityField");

                    b.Navigation("EntityFieldAction");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionField", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityFieldAction", "EntityFieldAction")
                        .WithMany("EntityFieldActionFields")
                        .HasForeignKey("EntityFieldActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityFieldActionTypeRequiredField", "EntityFieldActionTypeRequiredField")
                        .WithMany("EntityFieldActionFields")
                        .HasForeignKey("EntityFieldActionTypeRequiredFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("EntityFieldActionFields")
                        .HasForeignKey("EntityFieldId");

                    b.Navigation("EntityField");

                    b.Navigation("EntityFieldAction");

                    b.Navigation("EntityFieldActionTypeRequiredField");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroup", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("EntityFieldActionGroups")
                        .HasForeignKey("EntityFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityField");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroupCondition", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.ConditionType", "ConditionType")
                        .WithMany("EntityFieldActionConditions")
                        .HasForeignKey("ConditionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityFieldActionGroupConditionGroup", "EntityFieldActionGroupConditionGroup")
                        .WithMany("EntityFieldActionConditions")
                        .HasForeignKey("EntityFieldActionGroupConditionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "FirstSideRelatedToEntity")
                        .WithMany("FirstSideRelatedToEntity_EntityFieldActionConditions")
                        .HasForeignKey("FirstSideRelatedToEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "SecondSideRelatedToEntity")
                        .WithMany("SecondSideRelatedToEntity_EntityFieldActionConditions")
                        .HasForeignKey("SecondSideRelatedToEntityId");

                    b.Navigation("ConditionType");

                    b.Navigation("EntityFieldActionGroupConditionGroup");

                    b.Navigation("FirstSideRelatedToEntity");

                    b.Navigation("SecondSideRelatedToEntity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroupConditionGroup", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityFieldActionGroup", "EntityFieldActionGroup")
                        .WithMany("EntityFieldActionGroupConditionGroups")
                        .HasForeignKey("EntityFieldActionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityFieldActionGroup");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroupTriggerType", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityFieldActionGroup", "EntityFieldActionGroup")
                        .WithMany("EntityFieldActionGroupTriggerTypes")
                        .HasForeignKey("EntityFieldActionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lookup.TriggerType", "TriggerType")
                        .WithMany("EntityFieldActionGroupTriggerTypes")
                        .HasForeignKey("TriggerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityFieldActionGroup");

                    b.Navigation("TriggerType");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionType", b =>
                {
                    b.HasOne("Domain.Entities.Entity.Entity", "Entity")
                        .WithMany("EntityFieldActionTypes")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionTypeRequiredField", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityFieldActionType", "EntityFieldActionType")
                        .WithMany("EntityFieldActionTypeRequiredFields")
                        .HasForeignKey("EntityFieldActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "FieldShouldRelatedToEntity")
                        .WithMany("EntityFieldActionTypeRequiredFields")
                        .HasForeignKey("FieldShouldRelatedToEntityId");

                    b.HasOne("Domain.Entities.Lookup.FieldType", "FieldType")
                        .WithMany("EntityFieldActionTypeRequiredFields")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityFieldActionType");

                    b.Navigation("FieldShouldRelatedToEntity");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldCondition", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.ConditionType", "ConditionType")
                        .WithMany("EntityFieldConditions")
                        .HasForeignKey("ConditionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityFieldConditionGroup", "EntityFieldConditionGroup")
                        .WithMany("EntityFieldConditions")
                        .HasForeignKey("EntityFieldConditionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "FirstSideRelatedToEntity")
                        .WithMany("FirstSideRelatedToEntity_EntityFieldConditions")
                        .HasForeignKey("FirstSideRelatedToEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "SecondSideRelatedToEntity")
                        .WithMany("SecondSideRelatedToEntity_EntityFieldConditions")
                        .HasForeignKey("SecondSideRelatedToEntityId");

                    b.Navigation("ConditionType");

                    b.Navigation("EntityFieldConditionGroup");

                    b.Navigation("FirstSideRelatedToEntity");

                    b.Navigation("SecondSideRelatedToEntity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldConditionGroup", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.ConditionFor", "ConditionFor")
                        .WithMany("EntityFieldConditionGroups")
                        .HasForeignKey("ConditionForId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("EntityFieldConditionGroups")
                        .HasForeignKey("EntityFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConditionFor");

                    b.Navigation("EntityField");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldGroup", b =>
                {
                    b.HasOne("Domain.Entities.Entity.Entity", "Entity")
                        .WithMany("EntityFieldGroups")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldOption", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("EntityFieldOptions")
                        .HasForeignKey("EntityFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityField");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldOptionCondition", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.ConditionType", "ConditionType")
                        .WithMany("EntityFieldOptionConditions")
                        .HasForeignKey("ConditionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityFieldOptionConditionGroup", "EntityFieldOptionConditionGroup")
                        .WithMany("EntityFieldOptionConditions")
                        .HasForeignKey("EntityFieldOptionConditionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "FirstSideRelatedToEntity")
                        .WithMany("FirstSideRelatedToEntity_EntityFieldOptionConditions")
                        .HasForeignKey("FirstSideRelatedToEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "SecondSideRelatedToEntity")
                        .WithMany("SecondSideRelatedToEntity_EntityFieldOptionConditions")
                        .HasForeignKey("SecondSideRelatedToEntityId");

                    b.Navigation("ConditionType");

                    b.Navigation("EntityFieldOptionConditionGroup");

                    b.Navigation("FirstSideRelatedToEntity");

                    b.Navigation("SecondSideRelatedToEntity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldOptionConditionGroup", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.ConditionFor", "ConditionFor")
                        .WithMany("EntityFieldOptionConditionGroups")
                        .HasForeignKey("ConditionForId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.EntityFieldOption", "EntityFieldOption")
                        .WithMany("EntityFieldOptionConditionGroups")
                        .HasForeignKey("EntityFieldOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConditionFor");

                    b.Navigation("EntityFieldOption");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldValue", b =>
                {
                    b.HasOne("Domain.Entities.Entity.EntityField", "EntityField")
                        .WithMany("EntityFieldValues")
                        .HasForeignKey("EntityFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityField");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityMap", b =>
                {
                    b.HasOne("Domain.Entities.Entity.Entity", "Entity")
                        .WithMany("Entity_EntityMaps")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "MappedEntity")
                        .WithMany("MappedEntity_EntityMaps")
                        .HasForeignKey("MappedEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("MappedEntity");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityRelationBreak", b =>
                {
                    b.HasOne("Domain.Entities.Entity.Entity", "Entity2")
                        .WithMany("Entity2_EntityRelationBreaks")
                        .HasForeignKey("Entity2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Entity.Entity", "Entity")
                        .WithMany("Entity_EntityRelationBreaks")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Entity2");
                });

            modelBuilder.Entity("Domain.Entities.Identity.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Application.PersonalInfo", "PersonalInfo")
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.Identity.User", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User", "DirectLeader")
                        .WithOne("LastModifiedByUser")
                        .HasForeignKey("Domain.Entities.Identity.User", "LastModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DirectLeader");

                    b.Navigation("PersonalInfo");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserCategory", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserPermission", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserRealTime", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Domain.Entities.Identity.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId");

                    b.HasOne("Domain.Entities.Identity.User", "User")
                        .WithMany("UserRealTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserSetting", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Domain.Entities.Identity.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId");

                    b.HasOne("Domain.Entities.Lookup.SettingType", "SettingType")
                        .WithMany("UserSettings")
                        .HasForeignKey("SettingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("SettingType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserTeams", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Log.ContactUploadingLog", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.Campaign", "Campaign")
                        .WithMany("ContactUploadingLogs")
                        .HasForeignKey("CampaignId");

                    b.HasOne("Domain.Entities.Lookup.Category", "Category")
                        .WithMany("ContactUploadingLogs")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Entities.Application.Contact", "Contact")
                        .WithMany("ContactUploadingLogs")
                        .HasForeignKey("ContactId");

                    b.HasOne("Domain.Entities.Lookup.Priority", "Priority")
                        .WithMany("ContactUploadingLogs")
                        .HasForeignKey("PriorityId");

                    b.HasOne("Domain.Entities.Application.SystemProgress", "SystemProgress")
                        .WithMany()
                        .HasForeignKey("SystemProgressId");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("Priority");

                    b.Navigation("SystemProgress");
                });

            modelBuilder.Entity("Domain.Entities.Log.HistoricalCallGeneralReportSammary", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.CallStatus", "CallStatus")
                        .WithMany()
                        .HasForeignKey("CallStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lookup.CallType", "CallType")
                        .WithMany()
                        .HasForeignKey("CallTypeId");

                    b.HasOne("Domain.Entities.Lookup.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lookup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Application.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Application.HistoricalCall", "HistoricalCall")
                        .WithMany()
                        .HasForeignKey("HistoricalCallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.HasOne("Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CallStatus");

                    b.Navigation("CallType");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("HistoricalCall");

                    b.Navigation("Leader");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Log.Pim_contact_attempts_history", b =>
                {
                    b.HasOne("Domain.Entities.Application.AutoContact", null)
                        .WithMany("Pim_contact_attempts_historys")
                        .HasForeignKey("AutoContactId");

                    b.HasOne("Domain.Entities.Lookup.CallType", "CallType")
                        .WithMany()
                        .HasForeignKey("CallTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lookup.Campaign", "Campaign")
                        .WithMany("Pim_contact_attempts_historys")
                        .HasForeignKey("CampaignId");

                    b.HasOne("Domain.Entities.Lookup.Category", "Category")
                        .WithMany("Pim_contact_attempts_historys")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Entities.Application.Contact", "Contact")
                        .WithMany("Pim_contact_attempts_historys")
                        .HasForeignKey("ContactId");

                    b.HasOne("Domain.Entities.Application.HistoricalCall", "HistoricalCall")
                        .WithMany("Pim_contact_attempts_historys")
                        .HasForeignKey("HistoricalCallId");

                    b.HasOne("Domain.Entities.Application.ScheduledCall", "ScheduledCall")
                        .WithMany()
                        .HasForeignKey("ScheduledCallId");

                    b.HasOne("Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CallType");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("HistoricalCall");

                    b.Navigation("ScheduledCall");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Log.Pim_contact_attempts_historyLog", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("Domain.Entities.Lookup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Entities.Application.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Domain.Entities.Application.HistoricalCall", "HistoricalCall")
                        .WithMany()
                        .HasForeignKey("HistoricalCallId");

                    b.HasOne("Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("HistoricalCall");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Log.ScheduledCallLog", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", "AssignFromUser")
                        .WithMany()
                        .HasForeignKey("AssignFromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User", "AssignToUser")
                        .WithMany()
                        .HasForeignKey("AssignToUserId");

                    b.HasOne("Domain.Entities.Lookup.CallStatus", "CallStatus")
                        .WithMany()
                        .HasForeignKey("CallStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lookup.CallType", "CallType")
                        .WithMany()
                        .HasForeignKey("CallTypeId");

                    b.HasOne("Domain.Entities.Lookup.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lookup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Application.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Application.HistoricalCall", "LatestHistoricalCall")
                        .WithMany()
                        .HasForeignKey("LatestHistoricalCallId");

                    b.HasOne("Domain.Entities.Lookup.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Domain.Entities.Identity.User", "ScheduledByUser")
                        .WithMany()
                        .HasForeignKey("ScheduledByUserId");

                    b.HasOne("Domain.Entities.Identity.User", "ScheduledToUser")
                        .WithMany()
                        .HasForeignKey("ScheduledToUserId");

                    b.Navigation("AssignFromUser");

                    b.Navigation("AssignToUser");

                    b.Navigation("CallStatus");

                    b.Navigation("CallType");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("LatestHistoricalCall");

                    b.Navigation("Priority");

                    b.Navigation("ScheduledByUser");

                    b.Navigation("ScheduledToUser");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Campaign", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.Priority", "Priority")
                        .WithMany("Campaigns")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Category", b =>
                {
                    b.HasOne("Domain.Entities.Lookup.AVAYAAURACampaignPredictive", "AVAYAAURACampaignPredictive")
                        .WithMany("Categorys")
                        .HasForeignKey("AVAYAAURACampaignPredictiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookup.Category", "CallCategoryMain")
                        .WithMany("CallCategorys")
                        .HasForeignKey("CallCategoryMainId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Lookup.CallType", "CallType")
                        .WithMany("Categorys")
                        .HasForeignKey("CallTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Lookup.CategoryPath", "CategoryPath")
                        .WithMany("Categorys")
                        .HasForeignKey("CategoryPathId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookup.Priority", "Priority")
                        .WithMany("Categorys")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AVAYAAURACampaignPredictive");

                    b.Navigation("CallCategoryMain");

                    b.Navigation("CallType");

                    b.Navigation("CategoryPath");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Team", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Role", null)
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Application.AutoContact", b =>
                {
                    b.Navigation("Pim_contact_attempts_historys");
                });

            modelBuilder.Entity("Domain.Entities.Application.Contact", b =>
                {
                    b.Navigation("ContactUploadingLogs");

                    b.Navigation("HistoricalCalls");

                    b.Navigation("Pim_contact_attempts_historys");

                    b.Navigation("ScheduledCalls");
                });

            modelBuilder.Entity("Domain.Entities.Application.HistoricalCall", b =>
                {
                    b.Navigation("HistoricalCallPathResults");

                    b.Navigation("HistoricalCalls_LatestHistoricalCall");

                    b.Navigation("Pim_contact_attempts_historys");

                    b.Navigation("ScheduledCalls_LatestHistoricalCall");
                });

            modelBuilder.Entity("Domain.Entities.Application.PersonalInfo", b =>
                {
                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicFunction", b =>
                {
                    b.Navigation("DynamicFunctionParameters");

                    b.Navigation("DynamicFunctionResults");

                    b.Navigation("EntityActions");

                    b.Navigation("EntityFieldActions");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicFunctionParameter", b =>
                {
                    b.Navigation("EntityActionDynamicFunctionParameters");

                    b.Navigation("EntityFieldActionDynamicFunctionParameters");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicFunctionResult", b =>
                {
                    b.Navigation("EntityActionDynamicFunctionResults");

                    b.Navigation("EntityFieldActionDynamicFunctionResults");
                });

            modelBuilder.Entity("Domain.Entities.Entity.DynamicReport", b =>
                {
                    b.Navigation("DynamicReportFields");
                });

            modelBuilder.Entity("Domain.Entities.Entity.Entity", b =>
                {
                    b.Navigation("DynamicReports");

                    b.Navigation("Entity2_EntityRelationBreaks");

                    b.Navigation("EntityActionGroups");

                    b.Navigation("EntityFieldActionTypeRequiredFields");

                    b.Navigation("EntityFieldActionTypes");

                    b.Navigation("EntityFieldGroups");

                    b.Navigation("Entity_EntityMaps");

                    b.Navigation("Entity_EntityRelationBreaks");

                    b.Navigation("FirstSideRelatedToEntity_EntityActionConditions");

                    b.Navigation("FirstSideRelatedToEntity_EntityFieldActionConditions");

                    b.Navigation("FirstSideRelatedToEntity_EntityFieldConditions");

                    b.Navigation("FirstSideRelatedToEntity_EntityFieldOptionConditions");

                    b.Navigation("MappedEntity_EntityMaps");

                    b.Navigation("SecondSideRelatedToEntity_EntityActionConditions");

                    b.Navigation("SecondSideRelatedToEntity_EntityFieldActionConditions");

                    b.Navigation("SecondSideRelatedToEntity_EntityFieldConditions");

                    b.Navigation("SecondSideRelatedToEntity_EntityFieldOptionConditions");

                    b.Navigation("SystemProgresses");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityAction", b =>
                {
                    b.Navigation("EntityActionDynamicFunctionParameters");

                    b.Navigation("EntityActionDynamicFunctionResults");

                    b.Navigation("EntityActionFields");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroup", b =>
                {
                    b.Navigation("EntityActionGroupConditionGroups");

                    b.Navigation("EntityActionGroupTriggerTypes");

                    b.Navigation("EntityActions");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionGroupConditionGroup", b =>
                {
                    b.Navigation("EntityActionConditions");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionType", b =>
                {
                    b.Navigation("EntityActionTypeRequiredFields");

                    b.Navigation("EntityActions");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityActionTypeRequiredField", b =>
                {
                    b.Navigation("EntityActionFields");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityField", b =>
                {
                    b.Navigation("EntityActionDynamicFunctionParameters");

                    b.Navigation("EntityActionDynamicFunctionResults");

                    b.Navigation("EntityActionFields");

                    b.Navigation("EntityFieldActionDynamicFunctionParameters");

                    b.Navigation("EntityFieldActionDynamicFunctionResults");

                    b.Navigation("EntityFieldActionFields");

                    b.Navigation("EntityFieldActionGroups");

                    b.Navigation("EntityFieldConditionGroups");

                    b.Navigation("EntityFieldOptions");

                    b.Navigation("EntityFieldValues");

                    b.Navigation("HistoricalCallPathResults");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldAction", b =>
                {
                    b.Navigation("EntityFieldActionDynamicFunctionParameters");

                    b.Navigation("EntityFieldActionDynamicFunctionResults");

                    b.Navigation("EntityFieldActionFields");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionDynamicFunction", b =>
                {
                    b.Navigation("EntityFieldActionDynamicFunctionParameters");

                    b.Navigation("EntityFieldActionDynamicFunctionResults");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroup", b =>
                {
                    b.Navigation("EntityFieldActionGroupConditionGroups");

                    b.Navigation("EntityFieldActionGroupTriggerTypes");

                    b.Navigation("EntityFieldActions");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionGroupConditionGroup", b =>
                {
                    b.Navigation("EntityFieldActionConditions");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionType", b =>
                {
                    b.Navigation("EntityFieldActionTypeRequiredFields");

                    b.Navigation("EntityFieldActions");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldActionTypeRequiredField", b =>
                {
                    b.Navigation("EntityFieldActionFields");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldConditionGroup", b =>
                {
                    b.Navigation("EntityFieldConditions");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldGroup", b =>
                {
                    b.Navigation("EntityFields");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldOption", b =>
                {
                    b.Navigation("EntityFieldOptionConditionGroups");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityFieldOptionConditionGroup", b =>
                {
                    b.Navigation("EntityFieldOptionConditions");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityMap", b =>
                {
                    b.Navigation("DynamicReportFields");
                });

            modelBuilder.Entity("Domain.Entities.Entity.EntityType", b =>
                {
                    b.Navigation("EntityActionTypeRequiredFields");

                    b.Navigation("EntityActionTypes");

                    b.Navigation("EntityFields");

                    b.Navigation("Entitys");
                });

            modelBuilder.Entity("Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Roles");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRealTimes");

                    b.Navigation("UserSettings");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.AVAYAAURACampaignPredictive", b =>
                {
                    b.Navigation("Categorys");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.CallStatus", b =>
                {
                    b.Navigation("HistoricalCalls");

                    b.Navigation("ScheduledCalls");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.CallType", b =>
                {
                    b.Navigation("Categorys");

                    b.Navigation("HistoricalCalls");

                    b.Navigation("ScheduledCalls");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Campaign", b =>
                {
                    b.Navigation("ContactUploadingLogs");

                    b.Navigation("HistoricalCalls");

                    b.Navigation("Pim_contact_attempts_historys");

                    b.Navigation("ScheduledCalls");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Category", b =>
                {
                    b.Navigation("CallCategorys");

                    b.Navigation("ContactUploadingLogs");

                    b.Navigation("HistoricalCalls");

                    b.Navigation("Pim_contact_attempts_historys");

                    b.Navigation("ScheduledCalls");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.CategoryPath", b =>
                {
                    b.Navigation("Categorys");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.City", b =>
                {
                    b.Navigation("PersonalInfos");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.ConditionFor", b =>
                {
                    b.Navigation("EntityFieldConditionGroups");

                    b.Navigation("EntityFieldOptionConditionGroups");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.ConditionType", b =>
                {
                    b.Navigation("EntityActionConditions");

                    b.Navigation("EntityFieldActionConditions");

                    b.Navigation("EntityFieldConditions");

                    b.Navigation("EntityFieldOptionConditions");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.ContactCategory", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.FieldType", b =>
                {
                    b.Navigation("EntityActionTypeRequiredFields");

                    b.Navigation("EntityFieldActionTypeRequiredFields");

                    b.Navigation("EntityFields");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Priority", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Categorys");

                    b.Navigation("ContactUploadingLogs");

                    b.Navigation("HistoricalCalls");

                    b.Navigation("ScheduledCalls");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.SettingType", b =>
                {
                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.Team", b =>
                {
                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("Domain.Entities.Lookup.TriggerType", b =>
                {
                    b.Navigation("EntityActionGroupTriggerTypes");

                    b.Navigation("EntityFieldActionGroupTriggerTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
